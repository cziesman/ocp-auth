kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: ocp-amq-broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ocp-amq-broker
  template:
    metadata:
      labels:
        app: ocp-amq-broker
    spec:
      volumes:
        - name: broker-storage
          persistentVolumeClaim:
            claimName: ocp-amq-broker
        - name: log4j2-config
          configMap:
            name: ocp-amq-broker-log4j2
        - name: broker-config
          configMap:
            name: ocp-amq-broker
        - name: user-config
          secret:
            secretName: ocp-amq-broker-users
        - name: role-config
          secret:
            secretName: ocp-amq-broker-roles
        - name: certs-volume
          emptyDir: {}
        - name: keystore-volume
          emptyDir: {}
      initContainers:
        - name: setup-keystore
          image: 'image-registry.openshift-image-registry.svc:5000/openshift/java-runtime:latest'
          command: ["/bin/sh", "-c"]
          args:
            - |
              AMQ_PATH="/opt/amq/keystore"
              CERT_PATH="/certs/broker.crt"
              KEYSTORE_PATH="/certs/keystore.jks"
              TRUSTSTORE_PATH="/certs/truststore.jks"
              KEY_ALIAS="amq"
              STORE_PASS="changeit"
      
              # Check if keystore exists before generating a new one
              if [ ! -f "$KEYSTORE_PATH" ]; then
                echo "Creating keystore..."
                keytool -genkey -alias $KEY_ALIAS -keyalg RSA -keystore $KEYSTORE_PATH -storepass $STORE_PASS -keypass $STORE_PASS -dname "CN=broker, OU=Messaging, O=Example, L=City, ST=State, C=US"
                
                # Export certificate
                keytool -export -alias $KEY_ALIAS -keystore $KEYSTORE_PATH -storepass $STORE_PASS -file $CERT_PATH
                
                # Import certificate into the same keystore as a trusted cert
                keytool -import -trustcacerts -alias $KEY_ALIAS -file $CERT_PATH -keystore TRUSTSTORE_PATH -storepass $STORE_PASS -noprompt
              else
                echo "Keystore already exists. Skipping creation."
              fi
      
              # Move keystore and truststore to final location
              cp $KEYSTORE_PATH $AMQ_PATH/

              cp $TRUSTSTORE_PATH $AMQ_PATH/

              cp $CERT_PATH $AMQ_PATH/
              
              chmod 644 $AMQ_PATH/*
          volumeMounts:
            - name: certs-volume
              mountPath: /certs
            - name: keystore-volume
              mountPath: /opt/amq/keystore
      containers:
        - name: activemq-artemis
          image: 'registry.redhat.io/amq7/amq-broker-rhel8:7.12.3-1.1741869971'
#          image: 'registry.redhat.io/amq7/amq-broker:7.8-34.1669831362'
          envFrom:
            - secretRef:
                name: ocp-amq-broker
          resources: {}
          volumeMounts:
            - name: broker-storage
              mountPath: /opt/amq/broker/
            - name: log4j2-config
              mountPath: /opt/amq/conf/log4j2.properties
              subPath: log4j2.properties
            - name: broker-config
              mountPath: /opt/amq/conf/broker.xml
              subPath: broker.xml
            - name: user-config
              mountPath: /opt/amq/conf/artemis-users.properties
              subPath: artemis-users.properties
            - name: role-config
              mountPath: /opt/amq/conf/artemis-roles.properties
              subPath: artemis-roles.properties
            - name: keystore-volume
              mountPath: /opt/amq/keystore
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  serviceName: ocp-amq-broker
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
